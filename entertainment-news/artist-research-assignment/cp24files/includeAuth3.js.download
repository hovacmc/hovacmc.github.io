window.Tracking = function(auth) {
    "use strict";
    /* private vars*/
    var pVersion = "3.4.0";
    var pSetupAuthTracking = true;
    var pTrackedPage = false;
    var pTrackedAuth = false;
    var pValidPageTypes = ["errorPage"];
    var pScreenDoorBdu = null;
    var pInitialTrackCompleted = false;
    var pGaAccount;
    var pGaDomain;
    var pGigyaLogin = "Site";
    var pTrackedGigya = false;
    let inDebugMode = false;

    /* digitalData methods*/
    const debugConsole = (message) => {
        if (inDebugMode) {
            console.log(message);
        }
    };

    const toggleDebugMode = () => {
        if (inDebugMode) {
            inDebugMode = false;
        } else {
            inDebugMode = true;
        }
    };

    const digitalDataInit = () => {
        if (!window.digitalData) {
            window.digitalData = {};
        }
    };

    const digitalDataTypeInit = (type) => {
        if (!window.digitalData[type]) {
            window.digitalData[type] = {};
        }
    };

    const checkDigitalData = (key, value) => {
        if (typeof(key) !== "string") {
            debugConsole("checkDigitalData: error - key must be a string!");
            return false;
        }
        if (typeof(value) !== "number" && typeof(value) !== "string") {
            debugConsole("checkDigitalData: error - value must be number or string");
            return false;
        }

        return true;
    };

    const populateDigitalData = (type, key, value) => {
        if (checkDigitalData(key, value)) {
            digitalDataInit();
            digitalDataTypeInit(type);
            window.digitalData[type][key] = value;
            return (type + "." + key + ": " + value);
        }
    };

    const removeDigitalData = (type, key) => {
        if (!window.digitalData) {
            debugConsole("removeDigitalData: window.digitalData is undefined");
            return false;
        }
        if (type !== "user" && type !== "page") {
            debugConsole("removeDigitalData: invalid type");
            return false;
        }
        if (typeof(window.digitalData[type][key]) === "undefined") {
            debugConsole("removeDigitalData: key does not exist");
            return false;
        }

        debugConsole("removeDigitalData: " + type + "." + key + " has been deleted");
        delete window.digitalData[type][key];
        return window.digitalData;
    };

    const getQueryStringParameterValue = (parameterName, queryString) => {
        if (typeof(parameterName) !== "string") {
            debugConsole("getQueryStringParameter: invalid parameterName type");
            return false;
        }
        if (typeof(queryString) === "undefined") {
            queryString = window.document.URL;
        }
        const regexTest = new RegExp(parameterName + "=([^&\\s]*)");
        const parameterValue = queryString.match(regexTest);
        if (parameterValue === null) {
            debugConsole("getQueryStringParameter: parameter does not exist");
            return null;
        } else {
            return parameterValue[1];
        }
    };

    const setGigyaDigitalData = (key, value) => {
        if (checkDigitalData(key, value)) {
            digitalDataInit();
            digitalDataTypeInit("user");
            if (!window.digitalData.user.gigya) {
                window.digitalData.user.gigya = {};
            }
            window.digitalData.user.gigya[key] = value;
            return ("user.gigya." + key + ": " + value);
        } else {
            debugConsole("setGigyaDigitalData: invalid data");
            return false;
        }
    };

    const removeGigyaDigitalData = (key) => {
        if (typeof(window.digitalData) === "undefined" || (!window.digitalData.user && !window.digitalData.user.gigya)) {
            debugConsole("removeGigyaDigitalData: the gigya data layer is undefined");
            return false;
        }
        if (!window.digitalData.user.gigya[key]) {
            debugConsole("removeGigyaDigitalData: that key is not populated");
            return false;
        }
        debugConsole("removeGigyaDigitalData: user.gigya." + key + " has been deleted");
        delete window.digitalData.user.gigya[key];
        return window.digitalData;
    };

    const dispatchCustomEvent = (eventName, eventValue) => {
        if (!window._dataManager) {
            debugConsole("dispatchCustomEvent: window._dataManager is undefined!");
            return false;
        }
        let customEvent;
        if (typeof(eventValue) === "string" || typeof(eventValue) === "number") {
            customEvent = new CustomEvent(eventName, {
                detail: {
                    value: eventValue
                }
            });
            debugConsole("dispatchCustomEvent: fired " + eventName + " with detail value " + eventValue);
        } else {
            customEvent = new CustomEvent(eventName);
            debugConsole("dispatchCustomEvent: fired " + eventName);
        }
        document.dispatchEvent(customEvent);
        return true;
    };
    /* end digitalData methods*/

    function autoSetHierarchy() {
        const pageObject = window.digitalData.page;
        const hierarchyComponents = ["siteSection", "subsection1", "subsection2", "subsection3", "subsection4", "subsection5"];
        let hierarchy = "";

        if (window && window.digitalData && window.digitalData.page && !window.digitalData.page.hierarchy) {
            hierarchyComponents.forEach((element) => {
                if (typeof(pageObject[element]) === "string" && pageObject[element]) {
                    if (hierarchy.length === 0) {
                        hierarchy += pageObject[element];
                    } else {
                        hierarchy += "," + pageObject[element];
                    }
                }
            });
            window.digitalData.page.hierarchy = hierarchy;
            return hierarchy;
        }

        return false;
    };

    function containsValue(value) {
        return !(value == "" || value == null);
    };

    function enableGa() {
        if (pGaAccount != null && pGaDomain != null) {
            window._gaq = window._gaq || [];

            window._gaq.push(["_setAccount", pGaAccount]);
            window._gaq.push(["_setDomainName", pGaDomain]);
            window._gaq.push(["_trackPageview"]);

            (function() {
                var ga = document.createElement("script");
                ga.type = "text/javascript";
                ga.async = true;
                ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
                var s = document.getElementsByTagName("script")[0];
                s.parentNode.insertBefore(ga, s);
            })();
        }
    };

    function getIdentity(callSource) {
        var dataSource = callSource;

        auth.isAuthenticated()
            .then(function(authenticated) {
                if (authenticated === true) {
                    auth.getIdentity()
                        .then(function(identity) {
                            var userId = identity.identity.aisuid;
                            trackLoginResult(userId, dataSource);
                        })
                        .catch(function(errorPackage) {
                            track();
                            pTrackedAuth = true;
                        });
                }
            })
            .catch(function(errorPackage) {
                track();
                pTrackedAuth = true;
            });
    };

    function isAuthenticated() {

        auth.isAuthenticated()
            .then(function(authenticated) {
                if (authenticated === true) {
                    getIdentity("page");
                } else {
                    track();
                }
            })
            .catch(function(errorPackage) {
                track();

            });
    };

    function setBdu(checkisAuthenticated) {

        if (auth) {

            if (!pScreenDoorBdu) {
                auth.isAuthenticated()
                    .then(function(authenticated) {
                        if (authenticated === true) {
                            pScreenDoorBdu = auth.getSignInBduName();
                        }
                    });
            }

            setLinkTrackVarValue(14, pScreenDoorBdu);

            if (checkisAuthenticated) {
                isAuthenticated();
            }
        }
    };

    function setDeviceType(deviceType) {
        if (deviceType) {
            populateDigitalData("page", "deviceType", deviceType);
        }

        return this;
    };

    function setDeviceTypeVariables() {
        if (window.digitalData && window.digitalData.page && window.digitalData.page.deviceType && window.digitalData.page.siteName && typeof(window.digitalData.page.siteName) === "string") {
            const productName = window.digitalData.page.siteName.toLowerCase();
            setLinkTrackVarValue(69, productName);
            return productName;
        } else {
            debugConsole("setDeviceTypevariables: unable to set Device Type!");
            return false;
        }
    };

    function setLinkTrackVars(nums) {
        debugConsole("setLinkTrackVars: has been deprecated; link track variables will be set automatically by the Launch library");
        return true;
    };

    function setLinkTrackVarValue(num, value) {
        if (typeof(num) !== "number") {
            debugConsole("setLinkTrackVarValue: num not a number!");
            return false;
        }
        if (typeof(value) !== "string") {
            debugConsole("setLinkTrackVarValue: value not a string!");
            return false;
        }

        const gigyaVariables = [40, 41];
        const userVariables = [11, 12, 13, 14];
        const articleVariables = [3, 4, 32, 33];
        const key = mapData(num);

        if (value) {
            if (gigyaVariables.indexOf(num) > -1) {
                setGigyaDigitalData(key, value);
            } else if (userVariables.indexOf(num) > -1) {
                populateDigitalData("user", key, value);
            } else if (articleVariables.indexOf(num) > -1) {
                populateDigitalData("article", key, value);
            } else {
                populateDigitalData("page", key, value);
            }
        }

        return this;
    };

    function removeVarValue(number) {
        if (typeof(number) !== "number") {
            debugConsole("removeVarValue: must provide a number");
            return false;
        }

        const gigyaVariables = [40, 41];
        const userVariables = [11, 12, 13, 14];
        const articleVariables = [3, 4, 32, 33];
        const key = mapData(number);

        if (gigyaVariables.indexOf(number) > -1) {
            window.Tracking.digitalData.removeGigyaDigitalData(key);
        } else if (userVariables.indexOf(number) > -1) {
            window.Tracking.digitalData.removeDigitalData("user", key);
        } else if (articleVariables.indexOf(number) > -1) {
            window.Tracking.digitalData.removeDigitalData("article", key);
        } else {
            window.Tracking.digitalData.removeDigitalData("page", key);
        }
    };

    function mapData(number) {
        if (typeof(number) !== "number") {
            debugConsole("mapData: must provide a number");
            return false;
        }

        switch (number) {
            case 1:
                return "searchTerm";
            case 2:
                return "searchCount";
            case 3:
                return "title";
            case 4:
                return "id";
            case 5:
                return "contentType";
            case 6:
                return "siteSection";
            case 7:
                return "subsection1";
            case 8:
                return "subsection2";
            case 9:
                return "subsection3";
            case 10:
                return "subsection4";
            case 11:
                return "authenticationUserId";
            case 12:
                return "authenticationStatus";
            case 13:
                return "authenticationLocation";
            case 14:
                return "bdu";
            case 32:
                return "source";
            case 33:
                return "author";
            case 34:
                return "audioStation";
            case 35:
                return "playerState";
            case 36:
                return "internalCampaignId";
            case 38:
                return "clickZone";
            case 39:
                return "clickAction";
            case 40:
                return "demographics";
            case 41:
                return "signOnProvider";
            case 48:
                return "vhRelatedIndex";
            case 57:
                return "vhSearchKeyword";
            case 60:
                return "subsection5";
            case 61:
                return "sport";
            case 69:
                return "productName";
        }

        return "undefinedVariable" + number;
    };

    function trackLogin(userId) {

        setLinkTrackVarValue(11, userId);
        setLinkTrackVarValue(12, "logged in");

        setBdu();

        var referrerHost = document.referrer.substr(document.referrer.indexOf(".") + 1);
        var currentHost = location.host.substr(location.host.indexOf(".") + 1);

        if (referrerHost.indexOf(currentHost) != 0) {

            var trackEvent4 = true;

            if (typeof(Storage) !== "undefined") {
                if (sessionStorage.bmTrackingEvent4) {
                    trackEvent4 = Boolean(sessionStorage.bmTrackingEvent4);
                }
            }

            if (trackEvent4) {
                sessionStorage.bmTrackingEvent4 = false;
                dispatchCustomEvent("BDULogin");
            }

        }

    };

    function trackLoginResult(userName, dataSource) {
        if (userName != null && dataSource != null) {

            if (dataSource === "page" && pTrackedAuth == false) {
                trackLogin(userName);
                track();
                pTrackedAuth = true;
            } else if (dataSource === "login") {
                vhTrackVideoHubLogin(userName);
            }
        }
    };

    function getSiteAccount() {
        if (s && s.account) {
            return s.account;
        }

        return "getSiteAccount: no rsid set";
    };

    function getVersion() {
        return pVersion;
    };


    function raiseCustomEvent(eventId, eventDescription, varsToSend) {
        if (eventDescription) {
            dispatchCustomEvent(eventDescription);
        }
        return this;
    };

    function registerGigyaEvent() {
        if (gigya != null) {

            pTrackedGigya = true;

            $(document).ready(function() {
                gigya.socialize.addEventHandlers({
                    onLogin: trackGigyaSignOn,
                    onLogout: removeGigyaValue
                });
                gigya.accounts.getAccountInfo({
                    include: "profile, data, identities-all",
                    callback: setGigyaUserInfo
                });
            });
        }
    };

    function setGigyaLoginLocation(loginLocation) {
        pGigyaLogin = loginLocation;
    };

    function setGigyaUserInfo(response) {

        pTrackedGigya = false;

        if (response.errorCode == 0) {

            var profile = response["profile"];
            var data = response["data"];
            var ageRange = "unspecified";

            if ((null == profile.age) || (profile.age == "")) {
                ageRange = data.ageGroup;
            } else {
                ageRange = profile.age;
            }
            setGigyaValue(ageRange, profile.gender, response.loginProvider);
        }
        track();
    };

    function setGigyaValue(age, gender, provider) {
        var genderValue;
        switch (gender) {
            case "m":
                genderValue = "male";
                break;
            case "f":
                genderValue = "female";
                break;
            default:
                genderValue = "unspecified";
                break;
        }

        var value = age + "," + genderValue;
        setLinkTrackVarValue(40, value);
        setLinkTrackVarValue(41, provider);

        setBdu();

        return this;
    };

    function removeGigyaValue() {
        removeVarValue(40);
        removeVarValue(41);
    };

    function trackGigyaSignOn(event) {
        setGigyaValue(event.user.age, event.user.gender, event.user.loginProvider);
        const eventValue = "Gigya-" + pGigyaLogin + "-Signon";
        dispatchCustomEvent("gigyaSignOn", eventValue);
    };

    function trackGigyaShare(event) {

        if (event.providers) {
            var providers = event.providers.split(",");
            for (i = 0; i < providers.length; i++) {
                var provider = providers[i];

                setLinkTrackVarValue(41, provider);
                setBdu();
                var eventValue = "Gigya-Share-" + event.context;

                dispatchCustomEvent("gigyaShare", eventValue);
            }
        }

    };

    function trackGigyaComment(event) {
        setGigyaValue(event.user.age, event.user.gender, event.user.loginProvider);
        dispatchCustomEvent("gigyaComment");
    };

    function setContentTitle(contentTitle) {
        if (contentTitle && contentTitle != "") {
            setLinkTrackVarValue(3, contentTitle);
        }

        return this;
    };

    function setGaAccount(account) {
        pGaAccount = account;
    };

    function setGaDomain(domain) {
        pGaDomain = domain;
    };

    function gaTrackLinks(value) {
        if (typeof value === "boolean" && value) {
            $(document).on("click", "a[data-bm-corp]", function(event) {
                var element = event.target;

                //this means the link is not text.
                if (event.target.nodeName.toLowerCase() != "a") {
                    element = event.target.parentNode;
                }

                var linkName = ($(element).data("bm-corp"));
                var href = $(element).attr("href");

                if (_gaq) {
                    _gaq.push(["_trackEvent", "corp-link-clicked", linkName, href]);
                }

            });
        }
        return this;
    };

    function setGalleryName(name) {
        if (name && name != "") {
            setLinkTrackVarValue(4, name);
        }

        return this;
    };

    function setGlobalSuite(name) {
        return "setGlobalSuite: method is deprecated. Global account set by Adobe Launch.";
    };

    function setSiteAccount(siteAccount) {
        return "setSiteAccount: method is deprecated. Site account set by Adobe Launch.";
    };

    function setSiteId(id) {
        populateDigitalData("page", "siteName", id);

        return this;
    };

    const setPageName = (pageName) => {
        if (typeof(pageName) === "string") {
            const newName = pageName.trim().toLowerCase();
            populateDigitalData("page", "pageName", newName);
            return newName;
        }

        debugConsole("setPageName: not a valid overwrite value");

        return false;
    };

    const setArticleSegment = (address) => {
        const regex = new RegExp(/[^\/]+(?=\/$|$)/);
        articleSegment = address.match(regex)[0];

        return articleSegment;
    };

    function setPageType(pageType, prefix) {
        if (pValidPageTypes.indexOf(pageType) > -1) {
            if (prefix) {
                window.digitalData.page.pageName = prefix + ":" + document.url;
            } else {
                window.digitalData.page.pageName = document.url;
            }
        }

        return this;
    };

    const setSiteSection = (siteSection) => {
        if (containsValue(siteSection)) {
            setLinkTrackVarValue(6, siteSection);
        }

        return this;
    };

    function setSubSections(subSection1, subSection2, subSection3, subSection4, subSection5) {
        if (containsValue(subSection1)) {
            setLinkTrackVarValue(7, subSection1);
        }

        if (containsValue(subSection2)) {
            setLinkTrackVarValue(8, subSection2);
        }

        if (containsValue(subSection3)) {
            setLinkTrackVarValue(9, subSection3);
        }

        if (containsValue(subSection4)) {
            setLinkTrackVarValue(10, subSection4);
        }

        if (containsValue(subSection5)) {
            setLinkTrackVarValue(60, subSection5);
        }

        return this;
    };

    function track() {
        if (pTrackedPage == false && pTrackedAuth == false) {
            if (auth) {
                if (pSetupAuthTracking) {
                    pSetupAuthTracking = false;

                    $(document).ready(function() {
                        setBdu(true);

                        auth.addListener("onInfoClicked", function() {
                            dispatchCustomEvent("authInfoClicked");
                        });

                        auth.addListener("onSignInAttempt", function() {
                            dispatchCustomEvent("authSignInClicked");
                        });

                        auth.addListener("onBduSelected", function(bduName) {
                            pScreenDoorBdu = bduName;
                            setLinkTrackVarValue(14, pScreenDoorBdu);

                        });

                        auth.addListener("onAuthenticationStateChange", function(isAuthenticated) {
                            if (isAuthenticated) {
                                setBdu();
                                var tracking = {};
                                if (pScreenDoorBdu) {
                                    tracking.source = "login";
                                    getIdentity("login");
                                }
                            }
                        });
                    });
                } else if (pInitialTrackCompleted == false && pTrackedGigya == false) {
                    pInitialTrackCompleted = true;
                    pTrackedAuth = true;
                    trackPage();
                }
            } else {
                pInitialTrackCompleted = true;
                trackPage();
            }

            enableGa();
        }
    };

    function trackPage() {
        setLinkTrackVarValue(36, getQueryStringParameterValue("intcid"));
        setDeviceTypeVariables();
        autoSetHierarchy();
        setBdu();
        dispatchCustomEvent("digitalDataLoaded");
    };

    function trackLogout() {
        removeVarValue(11);
        removeVarValue(14);
        setLinkTrackVarValue(12, "anonymous");
        dispatchCustomEvent("BDULogout");
    };

    function trackExternalLinks(value) {
        debugConsole("trackExternalLinks: method is deprecated. External link tracking will be handled by Adobe Launch implementation.");

        return this;
    };

    function trackCorporateLink(linkName) {
        var label = "corporatelink_" + linkName + "_clicked";
        dispatchCustomEvent("trackCorporateLink", label);
    };

    function trackSearch(term, count) {
        if (term) {
            setLinkTrackVarValue(1, term);
            setLinkTrackVarValue(2, count);
        }
    };

    function trackSocial(value) {
        if (value) {
            setLinkTrackVarValue(40, value);
            setLinkTrackVarValue(41, setPageName());

            dispatchCustomEvent("trackSocial", value);
        } else {
            $(function() {
                $("#shareBarDiv").on("click", ".gig-share-button", function() {

                    var socialNetwork = $(this).parent().attr("class").split(" ")[2].replace("gig-button-container-", "");

                    setLinkTrackVars([40, 41]);
                    setLinkTrackVarValue(40, socialNetwork + "_clicked");
                    setLinkTrackVarValue(41, setPageName());

                    dispatchCustomEvent("trackSocial", socialNetwork + "_clicked");
                });
            });
        }
    };


    function vhTrackRelatedIndex(index) {
        setLinkTrackVarValue(48, index.toString());

        dispatchCustomEvent("vhTrackRelatedVideo");

        return this;
    };

    function vhTrackSearchKeyword(keyword) {
        setLinkTrackVarValue(57, keyword);

        dispatchCustomEvent("vhTrackSearchKeyword", keyword);

        return this;
    };

    function vhTrackZoneAndItem(clickZone, clickedItem) {
        var clickZoneValue = "video_hub_clicked_zone_" + clickZone;
        var clickedItemValue = "video_hub_clicked_item_" + clickedItem;
        var linkAndCategoryInfo = "videohub_clicked_zone:" + clickZoneValue + ", video_hub_clicked_item:" + clickedItemValue;
        setLinkTrackVarValue(38, clickZoneValue);
        setLinkTrackVarValue(39, clickedItemValue);

        dispatchCustomEvent("vhTrackZoneAndItem", linkAndCategoryInfo);

        return this;
    };

    function vhTrackVideoHubLogin(userId) {

        setLinkTrackVarValue(11, userId);
        setLinkTrackVarValue(12, "logged in");
        setLinkTrackVarValue(13, document.location.href);

        setBdu();

        dispatchCustomEvent("BDULogin");
    };

    const setSportSection = (sport) => {
        if (containsValue(sport)) {
            setLinkTrackVarValue(61, sport);
        }

        return this;
    };

    const setContentSource = () => {
        $(function() {
            var source = $(".source").text(),
                author = $(".author").text();

            if (containsValue(source)) {
                setLinkTrackVarValue(32, source);
            }
            if (containsValue(author)) {
                setLinkTrackVarValue(33, author);
            }
        });

        return this;
    };

    const trackAudioStream = (stationName) => { // triggers event28
        if (containsValue(stationName) && $) {
            $(function() {
                $(".radio-stream-popup").on("click", function() {
                    setLinkTrackVarValue(34, stationName);

                    dispatchCustomEvent("trackAudioStream", "audiostream_" + stationName + "_clicked");
                });
            });
        }
    };

    const trackPersistentPlayer = () => { // triggers event30
        if ($) {
            $(function() {
                $(window).on("scroll", function() {
                    if ($(".content").hasClass("persistent-track")) {
                        if (!$(".content").hasClass("hasScrolledDown")) {
                            $(".content").removeClass("persistent-track");
                            setLinkTrackVarValue(35, "normalPlayerState");
                        }
                    } else {
                        if ($(".content").hasClass("hasScrolledDown")) {
                            $(".content").addClass("persistent-track");
                            setLinkTrackVarValue(35, "persistentPlayerState");

                            dispatchCustomEvent("trackPersistentPlayer", "persistentplayer_engaged");
                        }
                    }

                });
            });
        }
    };

    const trackD2C = (linkName, pageTitle) => {
        if (!linkName || typeof(linkName) !== "string" || !pageTitle || typeof(pageTitle) !== "string") {
            return false;
        }

        const value = linkName.trim() + " - " + pageTitle.trim();

        dispatchCustomEvent("trackD2C", value);
    };

    const trackD2CExternal = (linkName) => {
        if (!linkName || typeof(linkName) !== "string") {
            return false;
        }

        const value = linkName.trim();

        dispatchCustomEvent("trackD2CExternal", value);
    };

    const trackLinks = (value) => {
        if (typeof value === "boolean" && value) {
            if ($) {
                $(document).on("click", "[data-corp]", function(event) {
                    const linkName = $(event.target).data("corp");
                    trackCorporateLink(linkName);
                    event.preventDefault();
                });
            }
        }
        return this;
    };

    return {
        ga: {
            setDomain: setGaDomain,
            setAccount: setGaAccount,
            trackLinks: gaTrackLinks
        },
        getSiteAccount: getSiteAccount,
        raiseCustomEvent: raiseCustomEvent,
        setContentTitle: setContentTitle,
        setDeviceType: setDeviceType,
        setGalleryName: setGalleryName,
        setGlobalSuite: setGlobalSuite,
        setPageName: setPageName,
        setPageType: setPageType,
        setSiteAccount: setSiteAccount,
        setSiteId: setSiteId,
        setSiteSection: setSiteSection,
        setSubSections: setSubSections,
        setValue: setLinkTrackVarValue,
        setLinkTrackVars: setLinkTrackVars,
        setSportSection: setSportSection,
        setContentSource: setContentSource,
        trackAudioStream: trackAudioStream,
        trackPersistentPlayer: trackPersistentPlayer,
        track: track,
        trackExternalLinks: trackExternalLinks,
        trackLinks: trackLinks,
        trackLogout: trackLogout,
        trackCorporateLink: trackCorporateLink,
        trackPage: trackPage,
        trackSearch: trackSearch,
        trackSocial: trackSocial,
        trackD2C: trackD2C,
        trackD2CExternal: trackD2CExternal,
        version: getVersion,
        videoHub: {
            trackSearchKeyword: vhTrackSearchKeyword,
            trackZoneAndItem: vhTrackZoneAndItem,
            trackRelatedIndex: vhTrackRelatedIndex
        },
        gigya: {
            enableTracking: registerGigyaEvent,
            loginLocation: setGigyaLoginLocation,
            onSendDone: trackGigyaShare,
            onCommentSubmitted: trackGigyaComment
        },
        digitalData: {
            init: digitalDataInit,
            inDebugMode: inDebugMode,
            toggleDebugMode: toggleDebugMode,
            debugConsole: debugConsole,
            populateDigitalData: populateDigitalData,
            removeDigitalData: removeDigitalData,
            getQueryStringParameterValue: getQueryStringParameterValue,
            setGigyaDigitalData: setGigyaDigitalData,
            removeGigyaDigitalData: removeGigyaDigitalData,
            dispatchCustomEvent: dispatchCustomEvent,
            removeVarValue: removeVarValue,
            autoSetHierarchy: autoSetHierarchy,
            setArticleSegment: setArticleSegment
        }
    };
}(typeof BmAuth === "undefined" ? null : BmAuth);
